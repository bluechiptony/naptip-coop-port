import {
  Component,
  OnInit,
  ChangeDetectionStrategy,
  OnDestroy,
} from '@angular/core';
import {
  CalendarEvent,
  CalendarMonthViewDay,
  CalendarView,
} from 'angular-calendar';

import { HttpParams, HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';
import {
  isSameMonth,
  isSameDay,
  startOfMonth,
  endOfMonth,
  startOfWeek,
  endOfWeek,
  startOfDay,
  endOfDay,
  format,
} from 'date-fns';
import { Observable } from 'rxjs';
import { EventService } from '../services/event.service';
import { OfficeEvent } from '../model/events.model';
// import { AppService } from '../application/services/app.service';
// import { colors } from '../demo-utils/colors';

@Component({
  selector: 'app-calendar',
  templateUrl: './calendar.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
  styleUrls: ['./calendar.component.scss'],
})
export class CalendarComponent implements OnInit, OnDestroy {
  viewDate: Date = new Date();

  view: CalendarView = CalendarView.Month;

  events$: Observable<Array<CalendarEvent<{ event: HouseEvent }>>>;

  activeDayIsOpen: boolean = false;

  // headers = new HttpHeaders({
  //   Authorization: this.app.getLoggedInUserToken(),
  // });
  // loggedInUser = this.app.getLoggedInUser();

  constructor(private app: EventService) {}

  ngOnDestroy(): void {
    console.log('trying to unsub');
  }
  ngOnInit(): void {
    this.fetchEventsRem();
    // console.log(startOfMonth);
    // this.getEventsFromRemote();
  }

  fetchEventsRem(): void {
    const getStart: any = {
      month: startOfMonth,
      week: startOfWeek,
      day: startOfDay,
    }[this.view];

    const getEnd: any = {
      month: endOfMonth,
      week: endOfWeek,
      day: endOfDay,
    }[this.view];

    const params = new HttpParams()
      .set(
        'primary_release_date.gte',
        format(getStart(this.viewDate), 'yyyy-MM-dd')
      )
      .set(
        'primary_release_date.lte',
        format(getEnd(this.viewDate), 'yyyy-MM-dd')
      )
      .set('api_key', '0ec33936a68018857d727958dca1424f');

    this.events$ = this.app.getEvents().pipe(
      map((results: any) => {
        console.log(results);
        let evts: any = results.data;

        return results.map((event: OfficeEvent) => {
          return {
            title: event.eventTitle,
            start: new Date(event.startDate),
            color: colors.yellow,
            allDay: true,
            meta: {
              event,
            },
          };
        });
      })
    );
  }

  dayClicked({
    date,
    events,
  }: {
    date: Date;
    events: Array<CalendarEvent<{ film: Film }>>;
  }): void {
    if (isSameMonth(date, this.viewDate)) {
      if (
        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||
        events.length === 0
      ) {
        this.activeDayIsOpen = false;
      } else {
        this.activeDayIsOpen = true;
        this.viewDate = date;
      }
    }
  }

  eventClicked(event: CalendarEvent<{ event: Event }>): void {
    window.open(
      // `https://www.themoviedb.org/movie/${event.meta.film.id}`,
      '_blank'
    );
  }
}

export const colors: any = {
  red: {
    primary: '#ad2121',
    secondary: '#FAE3E3',
  },
  blue: {
    primary: '#1e90ff',
    secondary: '#D1E8FF',
  },
  yellow: {
    primary: '#e3bc08',
    secondary: '#FDF1BA',
  },
};

interface Film {
  id: number;
  title: string;
  release_date: string;
}

// Generated by https://quicktype.io

export interface NassResponse {
  success: boolean;
  data: HouseEvent[];
  message: string;
}

export interface HouseEvent {
  eventId: number;
  eventCode: string;
  eventTitle: string;
  startDate: number;
  endDate: number;
  venue: string;
  eventType: string;
  createdDate: number;
  updatedDate: number;
  createdBy: string;
  updatedBy: string;
  assigned: boolean;
}

function getTimezoneOffsetString(date: Date): string {
  const timezoneOffset = date.getTimezoneOffset();
  const hoursOffset = String(
    Math.floor(Math.abs(timezoneOffset / 60))
  ).padStart(2, '0');
  const minutesOffset = String(Math.abs(timezoneOffset % 60)).padEnd(2, '0');
  const direction = timezoneOffset > 0 ? '-' : '+';
  console.log(`T00:00:00${direction}${hoursOffset}:${minutesOffset}`);

  return `T00:00:00${direction}${hoursOffset}:${minutesOffset}`;
}
function getTimezoneOffsetStringToDisplay(dateNumber: number): string {
  let constDate = new Date(dateNumber);
  const timezoneOffset = constDate.getTimezoneOffset();
  const hoursOffset = String(
    Math.floor(Math.abs(timezoneOffset / 60))
  ).padStart(2, '0');
  const minutesOffset = String(Math.abs(timezoneOffset % 60)).padEnd(2, '0');
  const direction = timezoneOffset > 0 ? '-' : '+';

  return `T00:00:00${direction}${hoursOffset}:${minutesOffset}`;
}

// subscribe(
//   data => {
//     let response: any = data;
//     // console.log(JSON.stringify((response.data[0]));
//     let event = response.data[0];
//     delete event.eventDescription;
//     console.log(JSON.stringify(event));
//   },
//   error => {
//     this.app.processError(error);
//   }
// );
